@use "sass:math";


/*************************************************
 *					VARS
 ************************************************/

$var-prefix: 'hd';



/*************************************************
 *					COLORS
 ************************************************/

$colors: (
    primary:    	#193384,
    secondary:	    #8ec521,
    accent: 	    #fe6417,
    gray: 		    #bab1ad,
    light: 		    #f8f7f7,
    lighten: 	    #ffffff,
    dark: 		    #2f2c2b,
    darken: 	    #000000,
);

$dark-colors: (
    primary:    	#e6cc7b,
    secondary:	    #713ade,
    accent: 	    #019be8,
    gray: 		    #454e52,
    light: 		    #070808,
    lighten: 	    #000000,
    dark: 		    #d0d3d4,
    darken: 	    #ffffff,
);



//###########  Prepare Alpha Colors  ###########//


// Prepare alpha colors
@each $color-name, $color-value in $colors {
    @for $i from 1 through 9 {
        $colors: map-merge($colors, (#{$color-name}-alpha-#{$i}: rgba($color-value, math.div($i, 10) ) ) ) ;
    }
}

// Prepare alpha for dark colors
@each $color-name, $color-value in $dark-colors {
    @for $i from 1 through 9 {
        $dark-colors: map-merge($dark-colors, (#{$color-name}-alpha-#{$i}: rgba($color-value, math.div($i, 10) ) ) ) ;
    }
}


// Add alpha colors to root variables
@media (prefers-color-scheme: light) {
    :root {
        @each $color-name, $color-value in $colors {
            --#{$var-prefix}-color-#{"" + $color-name + ""}: #{$color-value};
        }
    }
}

@media (prefers-color-scheme: dark) {
    :root {
        @each $color-name, $color-value in $dark-colors {
            --#{$var-prefix}-color-#{"" + $color-name + ""}: #{$color-value};
        }	
    }
}

[color-scheme="light"] {
    @each $color-name, $color-value in $colors {
        --#{$var-prefix}-color-#{"" + $color-name + ""}: #{$color-value};
    }
}

[color-scheme="dark"] {
    @each $color-name, $color-value in $dark-colors {
        --#{$var-prefix}-color-#{"" + $color-name + ""}: #{$color-value};
    }
}




//###########  FUNDTIONS  ###########//

// Get color value
/*------------------------------------------------------------*/
@function colors($key, $opacity:1, $page:'') {
/*     @if $theme == 'dark' {
        $colors: $dark-colors;
    }
    @debug $theme; */

    @if map-has-key($colors, $key) {

        @if $opacity < 1 {
            @return rgba(map-get($colors, $key), $opacity);
        }
        @return map-get($colors, $key);

    }
    @else {
        @warn "colors map: There is no color with this name '#{$key}'";
        @return "#000";
    }
}

// Get color using css variable
/*------------------------------------------------------------*/
@function vcolors($key, $alpha:0, $page:'') {
    /* @if $theme == 'dark' {
        $colors: $dark-colors;
    }
    @warn var(--theme); */

    @if map-has-key($colors, $key){
        $vkey: --#{$var-prefix}-color-#{$key};
        @if $alpha > 0 {
            $vkey: --#{$var-prefix}-color-#{$key}-alpha-#{$alpha};
        }
        @return var($vkey);
    }
    @else {
        @warn "vcolor map: colors dosn't contain key: --hd-color-#{$key}";
    }
    @return #fff;
}

// Get variable color for css properties
// i.e: border: 1px solid red  -> border: color-replace('1px solid $', (primary));
// i.e: border: 1px solid rgb(253 97 97 / 40%)  -> border: color-replace('1px solid $', (primary), (.4));

/*------------------------------------------------------------*/
@function color-replace($str, $replacement, $opacity:(), $use_css_var:false) {
    $result: "";
    $length: str-length($str);
    $color: "";
    $x: 1;
    @for $i from 1 through $length {
        $char: str-slice($str, $i, $i );
        @if $char == '$' {            
            $char: nth($replacement, $x);
            $o: 0;   //-> $opacity[$x]
            $vo: 1;  //-> $vopacity[$x]
            @if length($opacity) > 0 {
                $o: nth($opacity, $x);
                $vo: $o;
                //@debug $o;
            }

            @if $use_css_var {
                $char: vcolors($char, $o);
                //@debug 'color:', $color;
            }
            @else{
                $char: colors($char, $vo);
                //@debug 'bg-color:', $color;
            }
            $x: $x+1;
        }
        $result: $result + $char;
    }
    //@debug $result;
    //@debug zip(10px 50px 100px, short mid); 
    @return unquote($result);
}



//###########  MIXINS  ###########//

/*------------------------------------------------------------*/
@mixin colors($name, $opacity:1, $suffix:'') {
	$rounded-opacity: 0;

	@if $opacity < 1 {
		$rounded-opacity:  decimal-round($opacity, 1) * 10;
		//@debug($opacity, $rounded-opacity);
	}

	color: #{colors($name, $opacity)}#{$suffix};
	color: #{vcolors($name, $rounded-opacity)}#{$suffix};
}
/*------------------------------------------------------------*/
@mixin bg-colors($name, $opacity:1, $suffix:'') {
	$rounded-opacity: 0;

	@if $opacity < 1 {
		$rounded-opacity:  decimal-round($opacity, 1) * 10;
		//@debug($opacity, $rounded-opacity);
	}
	//@debug $page, $name, $opacity, $rounded-opacity;

	background-color: #{colors($name, $opacity)}#{$suffix};
	background-color: #{vcolors($name, $rounded-opacity)}#{$suffix};
}


// Get variable color for css properties
// i.e: border: 1px solid red  -> @include color-replace(border, '1px solid $', (primary));
// i.e: border: 1px solid rgb(253 97 97 / 40%)  -> @include color-replace(border, '1px solid $', (primary), (.4));

/*------------------------------------------------------------*/
@mixin color-replace($prop-name, $str, $map_colors, $map_opacity:()) {
	#{$prop-name}: color-replace($str, $map_colors, $map_opacity);
	#{$prop-name}: color-replace($str, $map_colors, $map_opacity, true);
}

